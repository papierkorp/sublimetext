%YAML 1.2
---
name: Test
file_extensions: [test]
scope: source.test
extends: Packages/Go/Go.sublime-syntax
version: 2

contexts:
  prototype:
    - include: html-content

  main:
    - match: \btempl\s+([[:alpha:]_][[:alnum:]_]*)
      scope: keyword.declaration.templ.test
      push: templ-function

  html-content:
    - match: '<(?!\/)'
      embed: scope:text.html.basic
      escape: '(?:<\/[^>]+>(?!.*<\/[^>]+>)|/>)'
      escape_captures:
        0: text.html.basic

  templ-function:
    - meta_scope: meta.function.templ.test
    - match: \{
      scope: punctuation.section.block.begin.test
      push: templ-function-body
    - match: (?=\S)
      pop: true

  templ-function-body:
    - meta_scope: meta.block.templ.test
    - match: \{
      scope: punctuation.section.block.begin.test
      push: templ-function-body
    - match: \}
      scope: punctuation.section.block.end.test
      pop: true
    - include: html-content
    - include: go-in-templ

  go-in-templ:
    - match: '(\{)(\{)'
      captures:
        1: punctuation.section.embedded.begin.test
        2: punctuation.section.embedded.begin.test
      push: go-in-templ-content
    - match: '(\{)(?!\{)'
      scope: punctuation.section.embedded.begin.test
      push: go-expression-in-templ

  go-in-templ-content:
    - meta_scope: source.go.embedded.test
    - match: '(\})(\})'
      captures:
        1: punctuation.section.embedded.end.test
        2: punctuation.section.embedded.end.test
      pop: true
    - include: Packages/Go/Go.sublime-syntax#statements

  go-expression-in-templ:
    - meta_scope: source.go.embedded.test
    - match: '\}'
      scope: punctuation.section.embedded.end.test
      pop: true
    - include: Packages/Go/Go.sublime-syntax#expressions
# %YAML 1.2
# ---
# name: Test
# file_extensions: [test]
# scope: source.test
# extends: Packages/Go/Go.sublime-syntax
# version: 2

# contexts:
#   prototype:
#     - match: '<(?!\/)'
#       embed: scope:text.html.basic
#       escape: '(?:<\/[^>]+>(?!.*<\/[^>]+>)|/>)'
#       escape_captures:
#         0: text.html.basic
# %YAML 1.2
# ---
# name: Test
# file_extensions: [test]
# scope: source.test
# extends: Packages/JavaScript/JavaScript.sublime-syntax
# # extends: Packages/Go/Go.sublime-syntax
# version: 2

# contexts:
#   statements:
#     - meta_prepend: true
#     - match: '===='
#       embed: scope:text.html.basic
#       escape: '----'

# %YAML 1.2
# ---
# name: Go with HTML
# file_extensions: [go]
# scope: source.go

# variables:
#   identifier: '[[:alpha:]_][[:alnum:]_]*'

# contexts:
#   main:
#     - include: go-code
#     - match: <(?!\/)
#       captures:
#         1: punctuation.definition.tag.begin.html
#       push: html-content

#   go-code:
#     - match: '\b(func|package|import|var|const|type|struct|interface|map|chan|go|defer|fallthrough|goto|range|select)\b'
#       scope: keyword.control.go
#     - match: '\b(if|else|for|switch|case|default|break|continue|return)\b'
#       scope: keyword.control.flow.go
#     - match: '\b(int|uint|float|complex|bool|string|rune|byte)\b'
#       scope: storage.type.go
#     - match: '//.*'
#       scope: comment.line.double-slash.go
#     - match: '/\*'
#       push: block-comment

#   block-comment:
#     - meta_scope: comment.block.go
#     - match: '\*/'
#       pop: true

#   html-content:
#     - meta_content_scope: text.html.basic
#     - match: '<\/[^>]+>(?!.*<\/[^>]+>)' # match the last > if it starts with </
#       pop: true
#     - include: Packages/HTML/HTML.sublime-syntax
#     - match: <\/[^>]+>(?!.*<\/[^>]+>) # match the last > if it starts with </
#       captures:
#         1: punctuation.definition.tag.end.html
#         2: entity.name.tag.structure.any.html
#       pop: true
